load("stack-array.stlx");
load("bisection.stlx");

extractTokens := procedure(s) {
    tokenList := [];
    scan (s) {
        regex '0|[1-9][0-9]*' as [ number ]: tokenList += [ int(number) ];
        regex 'exp'           as operator  : tokenList += operator;
        regex 'log'           as operator  : tokenList += operator;
        regex 'sin'           as operator  : tokenList += operator;
        // regex 'cos'           as operator  : tokenList += operator;
        // regex 'tan'           as operator  : tokenList += operator;
        // regex 'asin'          as operator  : tokenList += operator;
        // regex 'acos'          as operator  : tokenList += operator;
        // regex 'atan'          as operator  : tokenList += operator;
        regex 'sqrt'          as operator  : tokenList += operator;
        regex 'x'             as operator  : tokenList += operator;
        regex 'e'             as operator  : tokenList += operator;
        regex 'Pi'            as operator  : tokenList += operator;
        regex '\*\*'          as operator  : tokenList += operator;
        regex '[+\-*/%()]'    as operator  : tokenList += operator;
        regex '[ \t]'                      : // skip
    }
    return tokenList;
};

class calculator(tl, x) {
    mTokenStack := createStack(tl);
    mArguments  := stack();
    mOperators  := stack();
    mVarX := x;

  static {
    evaluate := procedure() {
        print(mTokenStack);
        while (!mTokenStack.isEmpty()) {
            if (isInteger(mTokenStack.top())) {
                number := mTokenStack.top(); mTokenStack.pop();
                mArguments.push(number);
                continue;
            } 
            if (mTokenStack.top() in { "e", "Pi" }) {
                number := mathConst(mTokenStack.top());
                mTokenStack.pop();
                mArguments.push(number);
                continue;
            }
            if (mTokenStack.top() == "x") {
                mTokenStack.pop();
                mArguments.push(mVarX);
                continue;
            }
            nextOp := mTokenStack.top(); mTokenStack.pop();
            if (mOperators.isEmpty() || nextOp == "(") {
                mOperators.push(nextOp);
                continue;
            }
            stackOp := mOperators.top();
            if (stackOp == "(" && nextOp == ")") {
                mOperators.pop();
            } else if (nextOp == ")" || evalBefore(stackOp, nextOp)) {
                popAndEvaluate();
                mTokenStack.push(nextOp);
            } else {
                mOperators.push(nextOp);
            }
        }
        while (!mOperators.isEmpty()) { popAndEvaluate(); }
        return mArguments.top();
    };
    evalBefore := procedure(stackOp, nextOp) {
        prec := {
            ["+", 1],
            ["-", 1],
            ["*", 2],
            ["/", 2],
            ["%", 2],
            ["**", 3],
            ["log", 4],
            ["sqrt", 4],
            ["sin", 4],
            ["exp", 4]
        };
        if (stackOp == "(") { return false;  }
        if (prec[stackOp] > prec[nextOp]) {
            return true;
        } else if (prec[stackOp] == prec[nextOp]) {
            if (prec[stackOp] == 4) {
                return false;
            }
            if (stackOp == nextOp) {
                return stackOp in { "+", "-", "*", "/", "%" };
            }
            return true;
        } 
        return false;
    };
    popAndEvaluate := procedure() {
        op  := mOperators.top(); mOperators.pop();
        rhs := mArguments.top(); mArguments.pop();
        if (op in { "log", "sqrt", "sin", "exp" }) {
            match (op) {
                case "log": result := log(rhs);
                case "sqrt": result := sqrt(rhs);
                case "sin": result := sin(rhs);
                case "exp": result := exp(rhs);
            }
            mArguments.push(result);
            return;
        }
        lhs := mArguments.top(); mArguments.pop();
        match (op) {
            case "+" : result := lhs + rhs;
            case "-" : result := lhs - rhs;
            case "*" : result := lhs * rhs;
            case "/" : result := lhs / rhs;
            case "%" : result := lhs % rhs;
            case "**": result := lhs ** rhs;       
            default: abort("ERROR: *** Unknown Operator *** $op$");
        }
        mArguments.push(result);
    };    
  }
}

computeZero := procedure() {
    s  := read("enter function: ");
    tl := extractTokens(s);
    left_Boundary := read("Enter left  boundary: ");
    rightBoundary := read("Enter right boundary: ");
    f  := closure(x) {
        c := calculator(tl, x);
        return c.evaluate();
    };
    zero := findZero(f, left_Boundary, rightBoundary, 40);
    print(zero);
    print(nDecimalPlaces(zero, 10));
    if (isRational(zero)) {
        print("x0 = $nDecimalPlaces(zero, 10)$");
    } else {
        print("x0 = $zero$");
    }
};

tl := extractTokens("log exp 5");
c := calculator(tl, 2);
print(c.evaluate());
/*tl2 := extractTokens("sin(sin(x))");
c2 := calculator(tl, 2);
print(c.evaluate() == c2.evaluate());*/
//computeZero();
