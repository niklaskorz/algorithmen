// Stack with linked list

class Node() {
    data := om;
    next := om;

    static {
        equals := procedure(rhs) {
            if (rhs == om) {
                return false;
            }
            return data == rhs.data && next == rhs.next;
        };
        toList := procedure() {
            l := [data];
            if (next != om) {
                l := next.toList() + l;
            }
            return l;
        };
    }
}

class Stack() {
    mTop := om;

    static {
        isEmpty := procedure() {
            return mTop == om;
        };
        push := procedure(x) {
            node := Node();
            node.data := x;
            node.next := mTop;
            this.mTop := node;
            return this;
        };
        pop := procedure() {
            assert(!this.isEmpty(), "Empty stack cannot be popped");
            this.mTop := mTop.next;
            return this;
        };
        top := procedure() {
            if (this.isEmpty()) {
                return om;
            }
            return mTop.data;
        };
        f_str := procedure() {
            l := "";
            if (!this.isEmpty()) {
                l := join(mTop.toList(), ", ");
            }
            return "Stack($l$)";
        };
    }
} 