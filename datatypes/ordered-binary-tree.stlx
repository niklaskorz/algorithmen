class Node(cmp, k, v, l, r) {
    mCompare := cmp;
    mKey := k;
    mValue := v;
    mLeft := l;
    mRight := r;

    static {
        isNil := [] |=> false;

        find := procedure(k) {
            if (k == mKey) {
                return mValue;
            }
            if (mCompare(k, mKey)) {
                return mLeft.find(k);
            }
            return mRight.find(k);
        };

        insert := procedure(k, v) {
            if (k == mKey) {
                return Node(mCompare, k, v, mLeft, mRight);
            }
            if (mCompare(k, mKey)) {
                return Node(mCompare, mKey, mValue, mLeft.insert(k, v), mRight);
            }
            return Node(mCompare, mKey, mValue, mLeft, mRight.insert(k, v));
        };

        delMin := procedure() {
            if (mLeft.isNil()) {
                return [mRight, mKey, mValue];
            }
            [l2, k2, v2] := mLeft.delMin();
            return [Node(mCompare, mKey, mValue, l2, mRight), k2, v2];
        };

        deleteRoot := procedure() {
            if (mLeft.isNil()) {
                return mRight;
            }
            if (mRight.isNil()) {
                return mLeft;
            }
            [r2, k2, v2] := mRight.delMin();
            return Node(mCompare, k2, v2, mLeft, r2);
        };

        delete := procedure(k) {
            if (k == mKey) {
                return this.deleteRoot();
            }
            if (mCompare(k, mKey)) {
                return Node(mCompare, mKey, mValue, mLeft.delete(k), mRight);
            }
            return Node(mCompare, mKey, mValue, mLeft, mRight.delete(k));
        };
    }
}

class Nil(cmp) {
    mCompare := cmp;

    static {
        isNil := [] |=> true;
        find := k |=> om;
        insert := [k, v] |=> Node(mCompare, k, v, this, this);
        delete := k |=> this;
    }
}

class Map(cmp) {
    mRoot := Nil(cmp);

    static {
        find := k |=> mRoot.find(k);
        insert := procedure(k, v) {
            this.mRoot := mRoot.insert(k, v);
        };
        delete := procedure(k) {
            this.mRoot := mRoot.delete(k);
        };
    }
}
